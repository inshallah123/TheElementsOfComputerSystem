// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0(√）, 1(√）, -1(√）,
 *                x(√）, y(√）, !x(√）, !y(√）, -x(√）, -y(√）,
 *                x + 1(√）, y + 1(√）, x - 1(√）, y - 1(√）,
 *                x + y(√）, x - y(√）, y - x(√）,
 *                x & y(√）, x | y(√）
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //处理x://
    Mux16(a=x,b[0..15]=false,sel=zx,out=out1);
    Not16(in=out1,out=notout1);
    Mux16(a=out1,b=notout1,sel=nx,out=out2);

    //处理y://
    Mux16(a=y,b[0..15]=false,sel=zy,out=out3);
    Not16(in=out3,out=notout3);
    Mux16(a=out3,b=notout3,sel=ny,out=out4);

    //处理f；//
    Add16(a=out2,b=out4,out=out5);
    And16(a=out2,b=out4,out=out6);
    Mux16(a=out6,b=out5,sel=f,out=out7);

    //处理No和输出://
    Not16(in=out7,out=notout7);
    Mux16(a=out7,b=notout7,sel=no,out=out,out[0..7]=zrCheck1,out[8..15]=zrCheck2,out[15]=ng);

    //处理zr标志位：//
    Or8Way(in=zrCheck1,out=or1);
    Or8Way(in=zrCheck2,out=or2);
    Or(a=or1,b=or2,out=notzr);
    Not(in=notzr,out=zr);

}